library(datasets)
data(iris)
?iris
iris
?apply
names(iris)
apply(iris, c("Sepal.length", "Species"), mean)
lapply(iris, mean)
?lapply
iris$Species
iris[[iris$Species == "virginica"]]
subset(iris, iris$Species == "virginica")
lapply(subset(iris, iris$Species == "virginica"), mean)
lapply(iris,mean)
subset(iris, iris$Species == "virginica")
lapply(subset(iris, iris$Species == "virginica"), mean)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
tappy(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tappy(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
r <- tapply(mtcars$hp, mtcars$cyl, mean)
r
r[3]
r[1]
r[3] - r[1]
library("swirl")
swirl
swirl()
my_vector <- c(1:10)
my_vector <- 1:10
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age", "weight", "bp","rating", "test")
colnames(cnames, my_data)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE ) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6>4)
identical(twins, twins)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints >7)
any(ints < 0)
all(ints > 0)
library("swirl")
swirl()
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
?sd
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x) {x[1]}, c(8,4,0))
evaluate(function(x) {x[-1]}, c(8,4,0))
evaluate(function(x) {x[3]}, c(8,4,0))
info()
evaluate(function(x) {tail(x, n=1)}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("AATHA", "NAAN", "PASAYITEN!")
submit()
madlibs("Chennai",10,"apple")
mad_libs("Chennai",10,"apple")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orance)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem), elem[2])
lapply(unique_vals, function(elem) elem[2])
viewinfo(flag)
viewinfo(flags)
viewinfo()
saply(flags, unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(0:1, 100, prob=c(0.3,0.7))
sample(0:1, 100, rep=TRUE,prob=c(0.3,0.7))
flips <- sample(0:1, 100, rep=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, rep=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean=100, sd=25)
rnorm(10,mean=100, sd=25)
?rpois
rpois(5, c(10))
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
help cars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot( x = cars$dist, y= cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab ="Speed")
plot(x = cars$speed, y = cars$dist, xlab ="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab ="Speed", ylab="Stopping Distance")
plot(cars, title="My Plot")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim= c(10,15))
plot(cars, pch =2)
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(data=mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages(knitr)
install.packages("knitr")
setwd("~/DataScience/datasciencecoursera/Reproducible_Research/RepData_PeerAssessment2")
